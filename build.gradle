import org.gradle.internal.os.OperatingSystem;

buildscript {
    repositories { jcenter() }

    dependencies {
        classpath "com.netflix.nebula:nebula-docker-plugin:latest.release"
        // https://mvnrepository.com/artifact/com.kohlschutter.junixsocket/junixsocket-native
        classpath group: 'com.kohlschutter.junixsocket', name: 'junixsocket-native', version: '2.0.4'

    }
}

plugins {
    id "net.ltgt.apt" version "0.17"

}

apply plugin: 'java'
apply plugin: 'net.ltgt.apt'
apply plugin: 'net.ltgt.apt-idea'
apply plugin: 'checkstyle'
apply plugin: 'application'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'nebula.docker'
apply plugin: 'jacoco'

version = '1.8.1'
group 'com.github.ssullivan'
mainClassName = 'com.github.ssullivan.ApiApplication'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()

    maven { url "http://repo1.maven.org/maven2/" }
}

dependencies {
    annotationProcessor 'com.google.auto.value:auto-value:1.6.2'
    compile 'com.google.auto.value:auto-value-annotations:1.6.2'
    compile "io.dropwizard:dropwizard-core:1.3.7"
    compile "io.dropwizard:dropwizard-logging:1.3.7"
    compile 'com.google.inject:guice:4.2.2'
    compile 'com.google.inject.extensions:guice-servlet:4.2.2'
    compile 'org.glassfish.jersey.ext:jersey-bean-validation:2.25.1'
    compile 'org.glassfish.hk2:guice-bridge:2.5.0-b61'
    compile 'io.lettuce:lettuce-core:5.1.3.RELEASE'
    compile 'org.apache.commons:commons-pool2:2.4.3'
    compile 'com.fasterxml.uuid:java-uuid-generator:3.1.5'
    compile 'com.smoketurner:dropwizard-swagger:1.3.7-1'
    compile 'com.spotify:completable-futures:0.3.1'

    // https://mvnrepository.com/artifact/io.dropwizard/dropwizard-testing
    testCompile group: 'io.dropwizard', name: 'dropwizard-testing', version: '1.3.5'
// https://mvnrepository.com/artifact/org.mockito/mockito-core
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.22.0'
// https://mvnrepository.com/artifact/org.mockito/junit-jupiter
    compile group: 'org.mockito', name: 'junit-jupiter', version: '2.20.0'
    testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.25.1'
    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )
    testCompile "org.hamcrest:hamcrest-junit:2.0.0.0"
    testCompile 'org.junit.vintage:junit-vintage-engine:5.1.0'
}

test {
    useJUnitPlatform()
}


checkstyle {
    toolVersion = "8.9"
}

ext.AWS_ACCOUNT_ID = System.getenv("AWS_ACCOUNT_ID")
ext.AWS_DEFAULT_REGION = System.getenv("AWS_DEFAULT_REGION")

if (AWS_DEFAULT_REGION == null) {
    AWS_DEFAULT_REGION = "us-east-2"
}


task copyDockerResources(type: Copy) {
    doFirst {
        mkdir project.buildDir
        mkdir new File(project.buildDir, "docker-resources")
    }
    from 'docker/'
    into 'build/docker-resources/'
    include "*.*"
}


distributions {
    main {
        contents {
            from(copyDockerResources) {
                into "bin"
            }

        }
    }
}

distTar {
    into(project.name + "-" + project.version + "/data") {
        from 'data/geonames/postalcodes'
        include '*.*'
    }
}

distZip {
    into(project.name + "-" + project.version + "/data") {
        from 'data/geonames/postalcodes'
        include '*.*'
    }
}
nebulaDocker {
    maintainerEmail = 'sjsullivan7@gmail.com'
    dockerBase = 'openjdk:8-alpine'

    // There is a problem with the docker java library that this
    // plugin uses where it doesn't work on windows.
    // So if you're stuck with Windows then you'll need
    // to make your daemon listen on localhost
    if (OperatingSystem.current().isWindows()) {
        dockerUrl = 'tcp://127.0.0.1:2375'
    }
    else {
        dockerUrl = 'unix:///var/run/docker.sock'
    }
    dockerRepo = [test: '', prod: AWS_ACCOUNT_ID + ".dkr.ecr." + AWS_DEFAULT_REGION + ".amazonaws.com/treatmentcenter-api", dev: '']
    dockerImage = {
        arg('UID=7999')
        arg('GID=7999')
        environmentVariable('JAVA_OPTS', '-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap')
        environmentVariable('APP_VERSION', project.version)
        environmentVariable('API_VERSION', project.version)
        entryPoint('/docker-entrypoint.sh')
        runCommand('apk --no-cache update \\\n' +
                '    && apk --no-cache upgrade \\\n' +
                '    && apk --no-cache add \\\n' +
                '\tca-certificates dos2unix \\\n' +
                '\tcurl \\\n' +
                '        shadow \\\n' +
                '        su-exec \\\n' +
                '    && sed -i s/#networkaddress.cache.ttl=-1/networkaddress.cache.ttl=30/ ${JAVA_HOME}/jre/lib/security/java.security \\\n' +
                '    && addgroup -g $GID app_user \\\n' +
                '    && adduser -D -s /bin/false -H -u $UID -G app_user app_user')
        copyFile('docker-entrypoint.sh', '/')
        copyFile('server.yml', '/treatmentcenter-api-latest/bin/')
        runCommand('chmod ugo+rx ./docker-entrypoint.sh && chmod ugo+rx /treatmentcenter-api-latest/bin/*.sh && dos2unix ./docker-entrypoint.sh')
        defaultCommand "/treatmentcenter-api-latest/bin/treatmentcenter-api", "server", "/treatmentcenter-api-latest/bin/server.yml"
    }

    afterEvaluate {
        apply plugin: 'jacoco'

        task createBuildDir << {
             mkdir project.buildDir
             mkdir new File(project.buildDir, "docker")
        }

        task copyDockerDir(type: Copy, dependsOn: [createBuildDir]) {
            from 'docker/'
            into 'build/docker/app-lib'
            include "*.*"
        }

        createDockerfile.dependsOn copyDockerDir
        copyDockerDir.mustRunAfter nebulaDockerCopyDistResources
    }
}




task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")


    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.destination "${buildDir}/reports/jacoco/report.html"
    }

    sourceSets sourceSets.main
}



idea {
    project {
        // experimental: whether annotation processing will be configured in the IDE; only actually used with the 'idea' task.
        configureAnnotationProcessing = true
    }
    module {
        apt {
            // whether generated sources dirs are added as generated sources root
            addGeneratedSourcesDirs = true
            // whether the annotationProcessor/apt and testAnnotationProcessor/testApt dependencies are added as module dependencies
            addAptDependencies = true

            // The following are mostly internal details; you shouldn't ever need to configure them.
            // whether the compileOnly and testCompileOnly dependencies are added as module dependencies
            addCompileOnlyDependencies = false // defaults to true in Gradle < 2.12
            // the dependency scope used for apt and/or compileOnly dependencies (when enabled above)
            mainDependenciesScope = "PROVIDED"
            // defaults to "COMPILE" in Gradle < 3.4, or when using the Gradle integration in IntelliJ IDEA
        }
    }
}

task detect {
    doLast {
        println(OperatingSystem.current().isMacOsX())
        println(OperatingSystem.current().isLinux())
    }
}
